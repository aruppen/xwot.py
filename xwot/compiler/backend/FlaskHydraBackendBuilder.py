# encoding: utf-8
"""
@author     Alexander RÃ¼edlinger <a.rueedlinger@gmail.com>
@date       17.06.2015

"""

from helper import OutputPrinter
from xwot.compiler.frontend import visitor
from xwot.compiler.backend.FlaskBackendBuilder import FlaskBackendBuilder


class FlaskHydraBackendBuilder(FlaskBackendBuilder):
    def __init__(self):
        visitor.BaseVisitor.__init__(self)
        self._out = OutputPrinter()

    def before(self):
        self._out.code([
                           '#',
                           '# Generated by xwot compiler.',
                           '#',
                           '# Flask xwot application.',
                           '#',
                           '',
                           'import os',
                           'from yadp.device import Description',
                           '',
                           'from xwot.util import local_ip',
                           'from xwot.util import create_description',
                           'from xwot.util.flask import hydra_link',
                           'from xwot.util.annotator import Annotator',
                           'from xwot.util.serializer import Serializer',
                           'from xwot.util.serializer import register_serializer',
                           'from xwot.util.hydra import JSONLDSerializer',
                           'from xwot.util import dir_path',
                           'from xwot.util import parent_dir_path',
                           'from xwot.util.vocabbuilder import HydraVocabBuilder',
                           '',
                           '',
                           '# base config',
                           'ip = local_ip()',
                           'port = 5000',
                           'http_addr = "http://%s:%s/" % (ip, port)',
                           'module_dir_path = dir_path(__file__)',
                           'app_dir_path = parent_dir_path(__file__)',
                           'xwot_file = os.path.join(app_dir_path, "device.xwot")',
                           '',
                           'iri = "%s%s" % (http_addr, "vocab")',
                           'vocab_url = iri + "#"',
                           'link = hydra_link(iri)',
                           '',
                           'annotator = Annotator()',
                           "register_serializer('application/ld+json', JSONLDSerializer(annotator))",
                           'vocabbuilder = HydraVocabBuilder(annotator)',
                           '',
                           'jsonld_description_str = create_description(xwot_file=xwot_file, base=http_addr)',
                           'yadp_description = Description(content_type="application/ld+json", content=jsonld_description_str)',
                           '',
                           '',
                           'from flask import Flask',
                           'app = Flask(__name__)',
                           '',
                           ''
                           ], ["xwot_device", "__init__"])

    def after(self):
        self._out.code([
                           "import %s" % node.name() for node in self._nodes
                       ], ["xwot_device", "__init__"])

        self._out.code([
                           '#',
                           '# Generated by xwot compiler.',
                           '#',
                           '# Flask xwot application.',
                           '#',
                           '',
                           'import xwot_device',
                           'from xwot_device import app',
                           'from xwot.util.flask import mount_vocab',
                           '',
                           'import yadp',
                           'yadp.debug()',
                           '',
                           'from yadp import service',
                           'from yadp.device import Device',
                           '',
                           "device = Device(urn='urn:xwot:device', url=xwot_device.http_addr, descriptions=[xwot_device.yadp_description])",
                           '',
                           'service = service()',
                           'yadp.debug()',
                           'service.register(device=device, passive=True)',
                           '',
                           "",
                           "if __name__ == '__main__':",
                           self._out.indent([
                               'mount_vocab(app, xwot_device.vocabbuilder)',
                               "app.run(host='0.0.0.0', port=xwot_device.port, debug=True)",
                               "service.shutdown()"
                           ])
                       ], ['runserver'])

        #